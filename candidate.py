# -*- coding: utf-8 -*-
"""Candidate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kR9atRkoioqxZDY8GwXI2I5PAYvHp8GF

合計得点配列->候補

問題点

・候補が単数か複数か分からない(そもそも鼻歌の秒数あるか分からん)

・穴除去(解決済み)

・島除去

・

import numpy as np

class Candidate:

#コンストラクタ(最終スコア配列, ボーダー, 単位時間, 何秒まで同じ候補にするか,)
  def __init__ (self, score, border, uni_time, range):
    self.score = np.ravel(score)
    self.border = border
    self.uni_time = uni_time
    self.range = range


 # 得点配列をボーダー以上の単位時間ががTrueの配列にする
  def judge(self):
    max = self.score.max()
    min = self.score.min()
    
    if(self.border < 1):
      part = (max-min)*self.border + min
    else:
      self.border = self.border / 100
      part = (max-min)*self.border + min

    return self.score > part


#ボーダー以上の単位時間のインデックスを返す(明らかにTrueなfalseをTrueにする)
  def candi(self):
    conti = int(self.range / self.uni_time) + 1
    can = self.judge()
    cannonzero = np.ravel(can.nonzero())#ボーダー以上の単位時間のインデックスを取得
    subcannonzero = cannonzero
    count = 0
    
    for num1 in range(cannonzero.size - 1):
      if cannonzero[num1] + 1 != cannonzero[num1+1] and cannonzero[num1+1] - cannonzero[num1] <= conti:
        fix = cannonzero[num1+1] - cannonzero[num1] - 1
        i = cannonzero[num1]
        for num2 in range(fix):
          subcannonzero = np.insert(subcannonzero, num1+1+num2+count, i+num2+1)
        count += fix
    return subcannonzero


#孤立している島の除去
  #def    


#候補出し
  def last(self):
    candi =  self.candi()
    candi = np.insert(candi, 0, -3)
    sincandi = np.arange(0)
    i = 0

    for num1 in range(1, candi.size - 1):
      if candi[num1-1] + 1 != candi[num1]:
        sincandi = np.append(sincandi,candi[num1])
      if candi[num1] + 1 != candi[num1+1]:
        sincandi = np.append(sincandi,candi[num1])
      if num1 == candi.size - 2 and sincandi.size / 2 != 0:
        sincandi = np.append(sincandi,candi[num1+1])

    for num2 in range(int(sincandi.size/2)):
      print(sincandi[num2*2], 'から', sincandi[num2*2+1], 'まで')


np_a = np.array([100, 90, 50, 20,20,90,30,90,40,50,60,80,90,60,100])
cans = Candidate(np_a, 0.6, 1, 1.2)
cans.last()
"""

import numpy as np


class Candidate:

  def __init__(self, unit_time, hum_time):
    self.score = np.arange(0)
    self.i = 0

    self.unit_time = unit_time
    self.hum_time = hum_time
    
    
  def add_score(self, score_list):
    if self.i == 0:
      self.score = score_list
    else:
      for j in range(score_list.size):
        self.score[j] += score_list[j]

    self.i += 1


  def candi(self, score, unit_time):
    can = np.argmin(score)
    return can * unit_time


  def test(self, score, unit_time):
    sin_score = score.argsort()
    print(np.where(sin_score == score[344]))
    return 0


  def last(self):
    a = self.test(self.score, self.unit_time)
    candidate_start = self.candi(self.score, self.unit_time)
    candidate_last = candidate_start + self.hum_time
    return candidate_start, candidate_last