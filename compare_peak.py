# -*- coding: utf-8 -*-
"""Compare_peak.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WY0ZNuqhTrk77KsdVa4wHF2bkqrAUf5V
"""

import numpy as np

class Compare_peak: 

  def __init__(self, music_list, hum_list):
    #print(music_list)
    #print(hum_list)

    num_music_list = self.numberlist(music_list)
    num_hum_list = self.numberlist(hum_list)
    #print(num_music_list)
    #print(num_hum_list)

    change_music_list = self.changelist(num_music_list)
    change_hum_list = self.changelist(num_hum_list)

    self.same_score = self.compare(num_music_list, num_hum_list)
    self.score = self.compare(change_music_list, change_hum_list)

    print("音の差の最小値", self.same_score.min())
    print("音の変化量の差の最小値", self.score.min())

    self.same_score = self.normalization(self.same_score)
    self.score = self.normalization(self.score)


  def numberlist(self, list1):
    list1=np.array(list1,dtype=object)
    list2 = np.arange(0)
    
    for i in range(list1.size):
      if 'C#' in list1[i]:
        list2 = np.append(list2, 2)
      elif 'C' in list1[i]:
        list2 = np.append(list2, 1)
      elif 'D#' in list1[i]:
        list2 = np.append(list2, 4)
      elif 'D' in list1[i]:
        list2 = np.append(list2, 3)
      elif 'E' in list1[i]:
        list2 = np.append(list2, 5)
      elif 'F#' in list1[i]:
        list2 = np.append(list2, 7)
      elif 'F' in list1[i]:
        list2 = np.append(list2, 6)
      elif 'G#' in list1[i]:
        list2 = np.append(list2, 9)
      elif 'G' in list1[i]:
        list2 = np.append(list2, 8)
      elif 'A#' in list1[i]:
        list2 = np.append(list2, 11)
      elif 'A' in list1[i]:
        list2 = np.append(list2, 10)
      elif 'B' in list1[i]:
        list2 = np.append(list2,12)
      else:
        if i != 0:
          list2 = np.append(list2, list2[i-1])
        else:
          list2 = np.append(list2, self.first_no_peak(list1))

    return list2


  def first_no_peak(self, list1):
    for sound in list1:
      if 'B' in sound:
        return 12
      elif 'A#' in sound:
        return 11
      elif 'A' in sound:
        return 10
      elif 'G#' in sound:
        return 9
      elif 'G' in sound:
        return 8
      elif 'F#' in sound:
        return 7
      elif 'F' in sound:
        return 6
      elif 'E' in sound:
        return 5
      elif 'D#' in sound:
        return 4
      elif 'D' in sound:
        return 3
      elif 'C#' in sound:
        return 2
      elif 'C' in sound:
        return 1

    return 1


  def changelist(self, list1):
    list2 = np.arange(0)

    for i in range(list1.size - 1):
      if abs(list1[i] - list1[i+1]) == 0:
        list2 = np.append(list2, 0)
      elif abs(list1[i] - list1[i+1]) == 1 or abs(list1[i] - list1[i+1]) == 11:
        list2 = np.append(list2, 1)
      elif abs(list1[i] - list1[i+1]) == 2 or abs(list1[i] - list1[i+1]) == 10:
        list2 = np.append(list2, 2)
      elif abs(list1[i] - list1[i+1]) == 3 or abs(list1[i] - list1[i+1]) == 9:
        list2 = np.append(list2, 3)
      elif abs(list1[i] - list1[i+1]) == 4 or abs(list1[i] - list1[i+1]) == 8:
        list2 = np.append(list2, 4)
      elif abs(list1[i] - list1[i+1]) == 5 or abs(list1[i] - list1[i+1]) == 7:
        list2 = np.append(list2, 5)
      else:
        list2 = np.append(list2, 6)

    return list2


  def compare(self, mlist, hlist):
    num = abs(mlist.size - hlist.size) + 1
    score_list = np.zeros(num, dtype=np.int)
    #score_list = np.arange(0)

    for i in range(num):
      #score_list = np.append(score_list, 0)
      for j in range(hlist.size):
        score_list[i] += abs(mlist[i + j] - hlist[j])
    #print(score_list )

    return score_list


  def normalization(self, score_list):
    score_list = np.asarray(score_list, dtype = float)
    max = score_list.max()
    min = score_list.min()
    diff = max - min

    for i in range(score_list.size):
      score_list[i] = (score_list[i] - min) / diff
    #print(score_list)

    return score_list

#mlist = ['X', 'X', 'C', 'A5', 'A3', 'A#5']
#hlist = ['X', 'X', 'X']

#com = Compare_peak(mlist, hlist)

#print(com.hum_list)